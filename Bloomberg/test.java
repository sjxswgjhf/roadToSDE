package Bloomberg;

import java.util.*;

public class test {
    class Solution {
        /*
        dp[age][upbound]达到的最大成绩

        */
        public int bestTeamScore(int[] scores, int[] ages) {
            int maxScore = 0;
            for(int i = 0; i < scores.length; i++){
                maxScore = Math.max(maxScore, scores[i]);
            }
            int maxAge = 0;
            for(int i = 0; i < ages.length; i++){
                maxAge = Math.max(maxAge, ages[i]);
            }

            HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();
            for(int i = 0; i < scores.length; i++){
                int score = scores[i];
                int age = ages[i];
                HashMap<Integer, Integer> list = map.getOrDefault(age, new HashMap<>());
                list.put(score, list.getOrDefault(score, 0) + 1);
                map.put(age, list);
            }
            int[] dp = new int[maxScore + 1];
            int res = 0;
            for(int i = 1; i <= maxAge; i++){
                int[] tmp = Arrays.copyOf(dp, dp.length);
                if(!map.containsKey(i)){
                    tmp = Arrays.copyOf(dp, dp.length);
                }else{
                    HashMap<Integer, Integer> list = map.get(i);
                    for(int j = 1; j <= maxScore; j++){
                        if(!list.containsKey(j)){
                            tmp[j] = Math.max(dp[j-1], dp[j]);
                        }else{
                            tmp[j] = Math.max(dp[j-1], dp[j])  + list.get(j) * j;
                        }
                        res = Math.max(tmp[j], res);
                    }
                }
                dp = Arrays.copyOf(tmp, tmp.length);
            }
            return res;
        }
    }
}
/*
[9,2,8,8,2]
[4,1,3,3,5]
27
16
6
[4,5,6,5]
[2,1,2,1]
[1,2,3,5]
[8,9,10,1]
[746879,611276,619517,546085,938641,400251,404380,504460,507917,488723,315772,757873,393678,292350,284607,926159,848432,272601,21432,899809,487445,574303,448517,177255,944552,653786,383421,87005,7372,842846,218501,639605,773896,236961,201510,774607,790568,37974,430436,920277,254189,154971,733659,507106,889921,102861,104632,427798,364932,201122,844686,368098,88278,174875,574901,710556,720168,426061,188627,477444,434987,928641,549687,44512,921774,548190,637168,759882,917226,925128,326277,769539,681525,483634,933302,811818,337835,604923,83081,575076,125292,18714,582152,167454,429762,89553,800137,355416,260601,296295,171400,759901,567729,647198,205560,801523,686350,622272,814377,925451,995786,30340,962710,301592,530847,782820,497305,919167,377663,163942,369484,860715,642887,525351,984406,48688,693103,755673,171217,957294,292004,208955,88391,658868,328630,790002,924146,230956,307323,479802,313074,176575,832696,240398,139641,402681,800744,959247,693397,223022,763287,367255,797396,793317,471118,803836,62868,498595,680120,530813,883493,139701,515603,788930,395615,966879,241810,650190,26640,554338,806482,490512,933470,378882,653409,936580,160458,719903,731624,969495,507322,672988,11256,999473,150161,805151,256093,677248,268647,569708,835283,245697,860306,910902,75639,404706,125335,341640,372455,701326,255395,752261,344068,843923,41350,852146,944410,566238,730174,320975,615110,611969,924613,614797,621013,617009,553512,255424,80251,655204,33991,666416,992521,216720,616375,487543,778425,996023,946537,108294,533162,438545,979270,420636,387178,751820,732958,349147,877043,90687,567987,206913,218407,496320,464787,485576,971445,392257,631589,394549,421449,19535,303578,658811,960081,488860,982214,38518,820857,875154,976770,860842,502201,190715,339978,357335,126385,135891,104339,337576,49449,634947,315085,931162,871209,898324,791742,689213,486242,946140,829280,414884,246257,861822,701973,474516,545259,896678,383913,474112,163629,825237,838819,777840,866823,410010,827927,89778,407475,701786,722415,371425,143595,568323,155084,287769,139165,796730,748576,987450,280183,805684,962594,54635,58468,924813,794908,573502,650067,111713,348281,409685,630903,991304,974959,303867,99858,86200,665075,74909,890588,298508,463190,6085,579590,19383,242756,474494,878492,386438,729600,578092,909276,158829,418747,811623,978253,579953,130550,408756,208772,154869,733065,346566,724072,762638,552748,552020,611353,586490,51217,81034,351133,470178,104280,990870,399050,292235,910951,63248,257183,481981,309237,413378,869459,370393,818764,11116,875906,322218,391486,811191,908166,439399,677496,737338,540885,965455,398170,144553,633502,123416,777173,229564,850932,837463,282669]
[532,157,624,176,54,537,176,851,504,22,555,861,956,93,296,690,544,198,426,633,785,199,267,792,958,323,44,792,110,217,101,949,483,75,18,480,500,613,545,617,903,607,930,44,367,769,319,330,856,285,647,769,794,751,763,548,897,133,966,127,441,333,484,931,139,155,342,162,296,684,157,610,981,768,871,747,536,986,28,272,990,308,178,995,847,571,660,451,555,12,333,671,534,725,148,549,168,656,109,749,17,433,251,419,872,832,846,482,395,799,150,484,116,191,811,589,984,459,831,36,366,532,429,265,682,521,259,644,474,498,878,293,239,942,978,894,299,233,354,178,699,382,298,128,964,55,389,278,626,438,959,223,676,209,76,392,707,30,160,7,490,334,847,867,801,445,151,23,964,225,609,190,736,840,288,306,328,462,2,14,374,201,461,654,80,655,650,660,908,976,349,561,246,35,64,944,625,4,78,637,637,207,642,993,219,536,47,131,505,660,463,621,10,657,100,366,618,938,955,39,766,65,242,986,972,20,167,838,271,580,320,632,383,927,233,811,330,949,689,738,909,329,977,82,686,909,240,105,246,179,405,487,657,175,641,685,893,46,140,6,982,245,198,945,121,22,985,262,879,389,610,35,216,299,996,240,365,421,554,716,692,346,358,770,715,181,204,207,425,918,177,533,910,320,308,956,745,306,345,990,37,764,832,675,113,338,785,612,699,874,60,955,964,211,940,812,230,977,480,738,971,687,348,569,729,451,909,915,328,904,535,744,248,862,674,820,491,827,940,382,652,799,212,987,193,606,27,120,901,84,533,217,41,616,897,947,680,242,944,218,477,812,763,210,758,127,664,16,631,595,460,159,559,131,450,183,323,393,249,142,404,470,320,194,893,593,108]
 */